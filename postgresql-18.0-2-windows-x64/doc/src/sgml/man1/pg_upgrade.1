'\" t
.\"     Title: pg_upgrade
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2025
.\"    Manual: PostgreSQL 18.0 Documentation
.\"    Source: PostgreSQL 18.0
.\"  Language: English
.\"
.TH "PG_UPGRADE" "1" "2025" "PostgreSQL 18.0" "PostgreSQL 18.0 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pg_upgrade \- upgrade a PostgreSQL server instance
.SH "SYNOPSIS"
.HP \w'\fBpg_upgrade\fR\ 'u
\fBpg_upgrade\fR \fB\-b\fR \fIoldbindir\fR [\fB\-B\fR\ \fInewbindir\fR] \fB\-d\fR \fIoldconfigdir\fR \fB\-D\fR \fInewconfigdir\fR [\fIoption\fR...]
.SH "DESCRIPTION"
.PP
pg_upgrade
(formerly called
pg_migrator) allows data stored in
PostgreSQL
data files to be upgraded to a later
PostgreSQL
major version without the data dump/restore typically required for major version upgrades, e\&.g\&., from 12\&.14 to 13\&.10 or from 14\&.9 to 15\&.5\&. It is not required for minor version upgrades, e\&.g\&., from 12\&.7 to 12\&.8 or from 14\&.1 to 14\&.5\&.
.PP
Major PostgreSQL releases regularly add new features that often change the layout of the system tables, but the internal data storage format rarely changes\&.
pg_upgrade
uses this fact to perform rapid upgrades by creating new system tables and simply reusing the old user data files\&. If a future major release ever changes the data storage format in a way that makes the old data format unreadable,
pg_upgrade
will not be usable for such upgrades\&. (The community will attempt to avoid such situations\&.)
.PP
pg_upgrade
does its best to make sure the old and new clusters are binary\-compatible, e\&.g\&., by checking for compatible compile\-time settings, including 32/64\-bit binaries\&. It is important that any external modules are also binary compatible, though this cannot be checked by
pg_upgrade\&.
.PP
pg_upgrade
supports upgrades from 9\&.2\&.X and later to the current major release of
PostgreSQL, including snapshot and beta releases\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
.PP
Upgrading a cluster causes the destination to execute arbitrary code of the source superusers\*(Aq choice\&. Ensure that the source superusers are trusted before upgrading\&.
.sp .5v
.RE
.SH "OPTIONS"
.PP
pg_upgrade
accepts the following command\-line arguments:
.PP
\fB\-b\fR \fIbindir\fR
.br
\fB\-\-old\-bindir=\fR\fIbindir\fR
.RS 4
the old PostgreSQL executable directory; environment variable
\fBPGBINOLD\fR
.RE
.PP
\fB\-B\fR \fIbindir\fR
.br
\fB\-\-new\-bindir=\fR\fIbindir\fR
.RS 4
the new PostgreSQL executable directory; default is the directory where
pg_upgrade
resides; environment variable
\fBPGBINNEW\fR
.RE
.PP
\fB\-c\fR
.br
\fB\-\-check\fR
.RS 4
check clusters only, don\*(Aqt change any data
.RE
.PP
\fB\-d\fR \fIconfigdir\fR
.br
\fB\-\-old\-datadir=\fR\fIconfigdir\fR
.RS 4
the old database cluster configuration directory; environment variable
\fBPGDATAOLD\fR
.RE
.PP
\fB\-D\fR \fIconfigdir\fR
.br
\fB\-\-new\-datadir=\fR\fIconfigdir\fR
.RS 4
the new database cluster configuration directory; environment variable
\fBPGDATANEW\fR
.RE
.PP
\fB\-j \fR\fB\fInjobs\fR\fR
.br
\fB\-\-jobs=\fR\fB\fInjobs\fR\fR
.RS 4
number of simultaneous connections and processes/threads to use
.RE
.PP
\fB\-k\fR
.br
\fB\-\-link\fR
.RS 4
use hard links instead of copying files to the new cluster
.RE
.PP
\fB\-N\fR
.br
\fB\-\-no\-sync\fR
.RS 4
By default,
\fBpg_upgrade\fR
will wait for all files of the upgraded cluster to be written safely to disk\&. This option causes
\fBpg_upgrade\fR
to return without waiting, which is faster, but means that a subsequent operating system crash can leave the data directory corrupt\&. Generally, this option is useful for testing but should not be used on a production installation\&.
.RE
.PP
\fB\-o\fR \fIoptions\fR
.br
\fB\-\-old\-options\fR \fIoptions\fR
.RS 4
options to be passed directly to the old
\fBpostgres\fR
command; multiple option invocations are appended
.RE
.PP
\fB\-O\fR \fIoptions\fR
.br
\fB\-\-new\-options\fR \fIoptions\fR
.RS 4
options to be passed directly to the new
\fBpostgres\fR
command; multiple option invocations are appended
.RE
.PP
\fB\-p\fR \fIport\fR
.br
\fB\-\-old\-port=\fR\fIport\fR
.RS 4
the old cluster port number; environment variable
\fBPGPORTOLD\fR
.RE
.PP
\fB\-P\fR \fIport\fR
.br
\fB\-\-new\-port=\fR\fIport\fR
.RS 4
the new cluster port number; environment variable
\fBPGPORTNEW\fR
.RE
.PP
\fB\-r\fR
.br
\fB\-\-retain\fR
.RS 4
retain SQL and log files even after successful completion
.RE
.PP
\fB\-s\fR \fIdir\fR
.br
\fB\-\-socketdir=\fR\fIdir\fR
.RS 4
directory to use for postmaster sockets during upgrade; default is current working directory; environment variable
\fBPGSOCKETDIR\fR
.RE
.PP
\fB\-U\fR \fIusername\fR
.br
\fB\-\-username=\fR\fIusername\fR
.RS 4
cluster\*(Aqs install user name; environment variable
\fBPGUSER\fR
.RE
.PP
\fB\-v\fR
.br
\fB\-\-verbose\fR
.RS 4
enable verbose internal logging
.RE
.PP
\fB\-V\fR
.br
\fB\-\-version\fR
.RS 4
display version information, then exit
.RE
.PP
\fB\-\-clone\fR
.RS 4
Use efficient file cloning (also known as
\(lqreflinks\(rq
on some systems) instead of copying files to the new cluster\&. This can result in near\-instantaneous copying of the data files, giving the speed advantages of
\fB\-k\fR/\fB\-\-link\fR
while leaving the old cluster untouched\&.
.sp
File cloning is only supported on some operating systems and file systems\&. If it is selected but not supported, the
pg_upgrade
run will error\&. At present, it is supported on Linux (kernel 4\&.5 or later) with Btrfs and XFS (on file systems created with reflink support), and on macOS with APFS\&.
.RE
.PP
\fB\-\-copy\fR
.RS 4
Copy files to the new cluster\&. This is the default\&. (See also
\fB\-\-link\fR,
\fB\-\-clone\fR,
\fB\-\-copy\-file\-range\fR, and
\fB\-\-swap\fR\&.)
.RE
.PP
\fB\-\-copy\-file\-range\fR
.RS 4
Use the
\fBcopy_file_range\fR
system call for efficient copying\&. On some file systems this gives results similar to
\fB\-\-clone\fR, sharing physical disk blocks, while on others it may still copy blocks, but do so via an optimized path\&. At present, it is supported on Linux and FreeBSD\&.
.RE
.PP
\fB\-\-no\-statistics\fR
.RS 4
Do not restore statistics from the old cluster into the new cluster\&.
.RE
.PP
\fB\-\-set\-char\-signedness=\fR\fIoption\fR
.RS 4
Manually set the default char signedness of new clusters\&. Possible values are
signed
and
unsigned\&.
.sp
In the C language, the default signedness of the
char
type (when not explicitly specified) varies across platforms\&. For example,
char
defaults to
signed char
on x86 CPUs but to
unsigned char
on ARM CPUs\&.
.sp
Starting from
PostgreSQL
18, database clusters maintain their own default char signedness setting, which can be used to ensure consistent behavior across platforms with different default char signedness\&. By default,
pg_upgrade
preserves the char signedness setting when upgrading from an existing cluster\&. However, when upgrading from
PostgreSQL
17 or earlier,
pg_upgrade
adopts the char signedness of the platform on which it was built\&.
.sp
This option allows you to explicitly set the default char signedness for the new cluster, overriding any inherited values\&. There are two specific scenarios where this option is relevant:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you are planning to migrate to a different platform after the upgrade, you should not use this option\&. The default behavior is right in this case\&. Instead, perform the upgrade on the original platform without this flag, and then migrate the cluster afterward\&. This is the recommended and safest approach\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you have already migrated the cluster to a platform with different char signedness (for example, from an x86\-based system to an ARM\-based system), you should use this option to specify the signedness matching the original platform\*(Aqs default char signedness\&. Additionally, it\*(Aqs essential not to modify any data files between migrating data files and running
\fBpg_upgrade\fR\&.
\fBpg_upgrade\fR
should be the first operation that starts the cluster on the new platform\&.
.RE
.sp
.RE
.PP
\fB\-\-swap\fR
.RS 4
Move the data directories from the old cluster to the new cluster\&. Then, replace the catalog files with those generated for the new cluster\&. This mode can outperform
\fB\-\-link\fR,
\fB\-\-clone\fR,
\fB\-\-copy\fR, and
\fB\-\-copy\-file\-range\fR, especially on clusters with many relations\&.
.sp
However, this mode creates many garbage files in the old cluster, which can prolong the file synchronization step if
\fB\-\-sync\-method=syncfs\fR
is used\&. Therefore, it is recommended to use
\fB\-\-sync\-method=fsync\fR
with
\fB\-\-swap\fR\&.
.sp
Additionally, once the file transfer step begins, the old cluster will be destructively modified and therefore will no longer be safe to start\&. See
Step 17
for details\&.
.RE
.PP
\fB\-\-sync\-method=\fR\fImethod\fR
.RS 4
When set to
fsync, which is the default,
\fBpg_upgrade\fR
will recursively open and synchronize all files in the upgraded cluster\*(Aqs data directory\&. The search for files will follow symbolic links for the WAL directory and each configured tablespace\&.
.sp
On Linux,
syncfs
may be used instead to ask the operating system to synchronize the whole file systems that contain the upgraded cluster\*(Aqs data directory, its WAL files, and each tablespace\&. See
recovery_init_sync_method
for information about the caveats to be aware of when using
syncfs\&.
.sp
This option has no effect when
\fB\-\-no\-sync\fR
is used\&.
.RE
.PP
\fB\-?\fR
.br
\fB\-\-help\fR
.RS 4
show help, then exit
.RE
.SH "USAGE"
.PP
These are the steps to perform an upgrade with
pg_upgrade:
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The steps to upgrade
logical replication clusters
are not covered here; refer to
Section\ \&29.13
for details\&.
.sp .5v
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Optionally move the old cluster: If you are using a version\-specific installation directory, e\&.g\&.,
/opt/PostgreSQL/18, you do not need to move the old cluster\&. The graphical installers all use version\-specific installation directories\&.
.sp
If your installation directory is not version\-specific, e\&.g\&.,
/usr/local/pgsql, it is necessary to move the current PostgreSQL install directory so it does not interfere with the new
PostgreSQL
installation\&. Once the current
PostgreSQL
server is shut down, it is safe to rename the PostgreSQL installation directory; assuming the old directory is
/usr/local/pgsql, you can do:
.sp
.if n \{\
.RS 4
.\}
.nf
mv /usr/local/pgsql /usr/local/pgsql\&.old
.fi
.if n \{\
.RE
.\}
.sp
to rename the directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
For source installs, build the new version: Build the new PostgreSQL source with
\fBconfigure\fR
flags that are compatible with the old cluster\&.
pg_upgrade
will check
\fBpg_controldata\fR
to make sure all settings are compatible before starting the upgrade\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Install the new PostgreSQL binaries: Install the new server\*(Aqs binaries and support files\&.
pg_upgrade
is included in a default installation\&.
.sp
For source installs, if you wish to install the new server in a custom location, use the
prefix
variable:
.sp
.if n \{\
.RS 4
.\}
.nf
make prefix=/usr/local/pgsql\&.new install
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Initialize the new PostgreSQL cluster: Initialize the new cluster using
\fBinitdb\fR\&. Again, use compatible
\fBinitdb\fR
flags that match the old cluster\&. Many prebuilt installers do this step automatically\&. There is no need to start the new cluster\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Install extension shared object files: Many extensions and custom modules, whether from
contrib
or another source, use shared object files (or DLLs), e\&.g\&.,
pgcrypto\&.so\&. If the old cluster used these, shared object files matching the new server binary must be installed in the new cluster, usually via operating system commands\&. Do not load the schema definitions, e\&.g\&.,
\fBCREATE EXTENSION pgcrypto\fR, because these will be duplicated from the old cluster\&. If extension updates are available,
pg_upgrade
will report this and create a script that can be run later to update them\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Copy custom full\-text search files: Copy any custom full text search files (dictionary, synonym, thesaurus, stop words) from the old to the new cluster\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
Adjust authentication: \fBpg_upgrade\fR
will connect to the old and new servers several times, so you might want to set authentication to
peer
in
pg_hba\&.conf
or use a
~/\&.pgpass
file (see
Section\ \&32.16)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
Stop both servers: Make sure both database servers are stopped using, on Unix, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
pg_ctl \-D /opt/PostgreSQL/12 stop
pg_ctl \-D /opt/PostgreSQL/18 stop
.fi
.if n \{\
.RE
.\}
.sp
or on Windows, using the proper service names:
.sp
.if n \{\
.RS 4
.\}
.nf
NET STOP postgresql\-12
NET STOP postgresql\-18
.fi
.if n \{\
.RE
.\}
.sp
Streaming replication and log\-shipping standby servers must be running during this shutdown so they receive all changes\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
Prepare for standby server upgrades: If you are upgrading standby servers using methods outlined in section
Step 11, verify that the old standby servers are caught up by running
pg_controldata
against the old primary and standby clusters\&. Verify that the
\(lqLatest checkpoint location\(rq
values match in all clusters\&. Also, make sure
\fIwal_level\fR
is not set to
minimal
in the
postgresql\&.conf
file on the new primary cluster\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  10." 4.2
.\}
Run pg_upgrade: Always run the
pg_upgrade
binary of the new server, not the old one\&.
pg_upgrade
requires the specification of the old and new cluster\*(Aqs data and executable (bin) directories\&. You can also specify user and port values, and whether you want the data files linked, cloned, or swapped instead of the default copy behavior\&.
.sp
If you use link mode, the upgrade will be much faster (no file copying) and use less disk space, but you will not be able to access your old cluster once you start the new cluster after the upgrade\&. Link mode also requires that the old and new cluster data directories be in the same file system\&. (Tablespaces and
pg_wal
can be on different file systems\&.) Clone mode provides the same speed and disk space advantages but does not cause the old cluster to be unusable once the new cluster is started\&. Clone mode also requires that the old and new data directories be in the same file system\&. This mode is only available on certain operating systems and file systems\&. Swap mode may be the fastest if there are many relations, but you will not be able to access your old cluster once the file transfer step begins\&. Swap mode also requires that the old and new cluster data directories be in the same file system\&.
.sp
Setting
\fB\-\-jobs\fR
to 2 or higher allows pg_upgrade to process multiple databases and tablespaces in parallel\&. A good starting point is the number of CPU cores on the machine\&. This option can substantially reduce the upgrade time for multi\-database and multi\-tablespace servers\&.
.sp
For Windows users, you must be logged into an administrative account, and then run
pg_upgrade
with quoted directories, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
pg_upgrade\&.exe
        \-\-old\-datadir "C:/Program Files/PostgreSQL/12/data"
        \-\-new\-datadir "C:/Program Files/PostgreSQL/18/data"
        \-\-old\-bindir "C:/Program Files/PostgreSQL/12/bin"
        \-\-new\-bindir "C:/Program Files/PostgreSQL/18/bin"
.fi
.if n \{\
.RE
.\}
.sp
Once started,
\fBpg_upgrade\fR
will verify the two clusters are compatible and then do the upgrade\&. You can use
\fBpg_upgrade \-\-check\fR
to perform only the checks, even if the old server is still running\&.
\fBpg_upgrade \-\-check\fR
will also outline any manual adjustments you will need to make after the upgrade\&. If you are going to be using link, clone, copy\-file\-range, or swap mode, you should use the option
\fB\-\-link\fR,
\fB\-\-clone\fR,
\fB\-\-copy\-file\-range\fR, or
\fB\-\-swap\fR
with
\fB\-\-check\fR
to enable mode\-specific checks\&.
\fBpg_upgrade\fR
requires write permission in the current directory\&.
.sp
Obviously, no one should be accessing the clusters during the upgrade\&.
pg_upgrade
defaults to running servers on port 50432 to avoid unintended client connections\&. You can use the same port number for both clusters when doing an upgrade because the old and new clusters will not be running at the same time\&. However, when checking an old running server, the old and new port numbers must be different\&.
.sp
If an error occurs while restoring the database schema,
\fBpg_upgrade\fR
will exit and you will have to revert to the old cluster as outlined in
Step 17
below\&. To try
\fBpg_upgrade\fR
again, you will need to modify the old cluster so the pg_upgrade schema restore succeeds\&. If the problem is a
contrib
module, you might need to uninstall the
contrib
module from the old cluster and install it in the new cluster after the upgrade, assuming the module is not being used to store user data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  11." 4.2
.\}
Upgrade streaming replication and log\-shipping standby servers: If you used link mode and have Streaming Replication (see
Section\ \&26.2.5) or Log\-Shipping (see
Section\ \&26.2) standby servers, you can follow these steps to quickly upgrade them\&. You will not be running
pg_upgrade
on the standby servers, but rather
rsync
on the primary\&. Do not start any servers yet\&.
.sp
If you did
\fInot\fR
use link mode, do not have or do not want to use
rsync, or want an easier solution, skip the instructions in this section and simply recreate the standby servers once
pg_upgrade
completes and the new primary is running\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Install the new PostgreSQL binaries on standby servers: Make sure the new binaries and support files are installed on all standby servers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Make sure the new standby data directories do \fInot\fR exist: Make sure the new standby data directories do
\fInot\fR
exist or are empty\&. If
initdb
was run, delete the standby servers\*(Aq new data directories\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Install extension shared object files: Install the same extension shared object files on the new standbys that you installed in the new primary cluster\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Stop standby servers: If the standby servers are still running, stop them now using the above instructions\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Save configuration files: Save any configuration files from the old standbys\*(Aq configuration directories you need to keep, e\&.g\&.,
postgresql\&.conf
(and any files included by it),
postgresql\&.auto\&.conf,
pg_hba\&.conf, because these will be overwritten or removed in the next step\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Run rsync: When using link mode, standby servers can be quickly upgraded using
rsync\&. To accomplish this, from a directory on the primary server that is above the old and new database cluster directories, run this on the
\fIprimary\fR
for each standby server:
.sp
.if n \{\
.RS 4
.\}
.nf
rsync \-\-archive \-\-delete \-\-hard\-links \-\-size\-only \-\-no\-inc\-recursive old_cluster new_cluster remote_dir
.fi
.if n \{\
.RE
.\}
.sp
where
\fBold_cluster\fR
and
\fBnew_cluster\fR
are relative to the current directory on the primary, and
\fBremote_dir\fR
is
\fIabove\fR
the old and new cluster directories on the standby\&. The directory structure under the specified directories on the primary and standbys must match\&. Consult the
rsync
manual page for details on specifying the remote directory, e\&.g\&.,
.sp
.if n \{\
.RS 4
.\}
.nf
rsync \-\-archive \-\-delete \-\-hard\-links \-\-size\-only \-\-no\-inc\-recursive /opt/PostgreSQL/12 \e
      /opt/PostgreSQL/18 standby\&.example\&.com:/opt/PostgreSQL
.fi
.if n \{\
.RE
.\}
.sp
You can verify what the command will do using
rsync\*(Aqs
\fB\-\-dry\-run\fR
option\&. While
rsync
must be run on the primary for at least one standby, it is possible to run
rsync
on an upgraded standby to upgrade other standbys, as long as the upgraded standby has not been started\&.
.sp
What this does is to record the links created by
pg_upgrade\*(Aqs link mode that connect files in the old and new clusters on the primary server\&. It then finds matching files in the standby\*(Aqs old cluster and creates links for them in the standby\*(Aqs new cluster\&. Files that were not linked on the primary are copied from the primary to the standby\&. (They are usually small\&.) This provides rapid standby upgrades\&. Unfortunately,
rsync
needlessly copies files associated with temporary and unlogged tables because these files don\*(Aqt normally exist on standby servers\&.
.sp
If you have tablespaces, you will need to run a similar
rsync
command for each tablespace directory, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
rsync \-\-archive \-\-delete \-\-hard\-links \-\-size\-only \-\-no\-inc\-recursive /vol1/pg_tblsp/PG_12_201909212 \e
      /vol1/pg_tblsp/PG_18_202307071 standby\&.example\&.com:/vol1/pg_tblsp
.fi
.if n \{\
.RE
.\}
.sp
If you have relocated
pg_wal
outside the data directories,
rsync
must be run on those directories too\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
Configure streaming replication and log\-shipping standby servers: Configure the servers for log shipping\&. (You do not need to run
\fBpg_backup_start()\fR
and
\fBpg_backup_stop()\fR
or take a file system backup as the standbys are still synchronized with the primary\&.) If the old primary is prior to version 17\&.0, then no slots on the primary are copied to the new standby, so all the slots on the old standby must be recreated manually\&. If the old primary is version 17\&.0 or later, then only logical slots on the primary are copied to the new standby, but other slots on the old standby are not copied, so must be recreated manually\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  12." 4.2
.\}
Restore pg_hba\&.conf: If you modified
pg_hba\&.conf, restore its original settings\&. It might also be necessary to adjust other configuration files in the new cluster to match the old cluster, e\&.g\&.,
postgresql\&.conf
(and any files included by it),
postgresql\&.auto\&.conf\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  13." 4.2
.\}
Start the new server: The new server can now be safely started, and then any
rsync\*(Aqed standby servers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  14." 4.2
.\}
Post\-upgrade processing: If any post\-upgrade processing is required, pg_upgrade will issue warnings as it completes\&. It will also generate script files that must be run by the administrator\&. The script files will connect to each database that needs post\-upgrade processing\&. Each script should be run using:
.sp
.if n \{\
.RS 4
.\}
.nf
psql \-\-username=postgres \-\-file=script\&.sql postgres
.fi
.if n \{\
.RE
.\}
.sp
The scripts can be run in any order and can be deleted once they have been run\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCaution\fR
.ps -1
.br
In general it is unsafe to access tables referenced in rebuild scripts until the rebuild scripts have run to completion; doing so could yield incorrect results or poor performance\&. Tables not referenced in rebuild scripts can be accessed immediately\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  15." 4.2
.\}
Statistics: Unless the
\fB\-\-no\-statistics\fR
option is specified,
\fBpg_upgrade\fR
will transfer most optimizer statistics from the old cluster to the new cluster\&. However, some statistics may not be transferred, such as those created explicitly with
CREATE STATISTICS (\fBCREATE_STATISTICS\fR(7))
or custom statistics added by an extension\&.
.sp
Because not all statistics are transferred by
\fBpg_upgrade\fR, you will be instructed to run commands to regenerate that information at the end of the upgrade\&. You might need to set connection parameters to match your new cluster\&.
.sp
First, use
\fBvacuumdb \-\-all \-\-analyze\-in\-stages \-\-missing\-stats\-only\fR
to quickly generate minimal optimizer statistics for relations without any\&. Then, use
\fBvacuumdb \-\-all \-\-analyze\-only\fR
to ensure all relations have updated cumulative statistics for triggering vacuum and analyze\&. For both commands, the use of
\fB\-\-jobs\fR
can speed it up\&. If
\fIvacuum_cost_delay\fR
is set to a non\-zero value, this can be overridden to speed up statistics generation using
\fBPGOPTIONS\fR, e\&.g\&.,
PGOPTIONS=\*(Aq\-c vacuum_cost_delay=0\*(Aq vacuumdb \&.\&.\&.\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  16." 4.2
.\}
Delete old cluster: Once you are satisfied with the upgrade, you can delete the old cluster\*(Aqs data directories by running the script mentioned when
\fBpg_upgrade\fR
completes\&. (Automatic deletion is not possible if you have user\-defined tablespaces inside the old data directory\&.) You can also delete the old installation directories (e\&.g\&.,
bin,
share)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  17." 4.2
.\}
Reverting to old cluster: If, after running
\fBpg_upgrade\fR, you wish to revert to the old cluster, there are several options:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-\-check\fR
option was used, the old cluster was unmodified; it can be restarted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If neither
\fB\-\-link\fR
nor
\fB\-\-swap\fR
was used, the old cluster was unmodified; it can be restarted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-\-link\fR
option was used, the data files might be shared between the old and new cluster:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fBpg_upgrade\fR
aborted before linking started, the old cluster was unmodified; it can be restarted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you did
\fInot\fR
start the new cluster, the old cluster was unmodified except that, when linking started, a
\&.old
suffix was appended to
$PGDATA/global/pg_control\&. To reuse the old cluster, remove the
\&.old
suffix from
$PGDATA/global/pg_control; you can then restart the old cluster\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you did start the new cluster, it has written to shared files and it is unsafe to use the old cluster\&. The old cluster will need to be restored from backup in this case\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-\-swap\fR
option was used, the old cluster might be destructively modified:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fBpg_upgrade\fR
aborts before reporting that the old cluster is no longer safe to start, the old cluster was unmodified; it can be restarted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fBpg_upgrade\fR
has reported that the old cluster is no longer safe to start, the old cluster was destructively modified\&. The old cluster will need to be restored from backup in this case\&.
.RE
.sp
.RE
.RE
.SH "ENVIRONMENT"
.PP
Some environment variables can be used to provide defaults for command\-line options:
.PP
\fBPGBINOLD\fR
.RS 4
The old PostgreSQL executable directory; option
\fB\-b\fR/\fB\-\-old\-bindir\fR\&.
.RE
.PP
\fBPGBINNEW\fR
.RS 4
The new PostgreSQL executable directory; option
\fB\-B\fR/\fB\-\-new\-bindir\fR\&.
.RE
.PP
\fBPGDATAOLD\fR
.RS 4
The old database cluster configuration directory; option
\fB\-d\fR/\fB\-\-old\-datadir\fR\&.
.RE
.PP
\fBPGDATANEW\fR
.RS 4
The new database cluster configuration directory; option
\fB\-D\fR/\fB\-\-new\-datadir\fR\&.
.RE
.PP
\fBPGPORTOLD\fR
.RS 4
The old cluster port number; option
\fB\-p\fR/\fB\-\-old\-port\fR\&.
.RE
.PP
\fBPGPORTNEW\fR
.RS 4
The new cluster port number; option
\fB\-P\fR/\fB\-\-new\-port\fR\&.
.RE
.PP
\fBPGSOCKETDIR\fR
.RS 4
Directory to use for postmaster sockets during upgrade; option
\fB\-s\fR/\fB\-\-socketdir\fR\&.
.RE
.PP
\fBPGUSER\fR
.RS 4
Cluster\*(Aqs install user name; option
\fB\-U\fR/\fB\-\-username\fR\&.
.RE
.SH "NOTES"
.PP
pg_upgrade
creates various working files, such as schema dumps, stored within
pg_upgrade_output\&.d
in the directory of the new cluster\&. Each run creates a new subdirectory named with a timestamp formatted as per ISO 8601 (%Y%m%dT%H%M%S), where all its generated files are stored\&.
pg_upgrade_output\&.d
and its contained files will be removed automatically if
pg_upgrade
completes successfully; but in the event of trouble, the files there may provide useful debugging information\&.
.PP
pg_upgrade
launches short\-lived postmasters in the old and new data directories\&. Temporary Unix socket files for communication with these postmasters are, by default, made in the current working directory\&. In some situations the path name for the current directory might be too long to be a valid socket name\&. In that case you can use the
\fB\-s\fR
option to put the socket files in some directory with a shorter path name\&. For security, be sure that that directory is not readable or writable by any other users\&. (This is not supported on Windows\&.)
.PP
All failure, rebuild, and reindex cases will be reported by
pg_upgrade
if they affect your installation; post\-upgrade scripts to rebuild tables and indexes will be generated automatically\&. If you are trying to automate the upgrade of many clusters, you should find that clusters with identical database schemas require the same post\-upgrade steps for all cluster upgrades; this is because the post\-upgrade steps are based on the database schemas, and not user data\&.
.PP
For deployment testing, create a schema\-only copy of the old cluster, insert dummy data, and upgrade that\&.
.PP
pg_upgrade
does not support upgrading of databases containing table columns using these
reg*
OID\-referencing system data types:
.RS 4
regcollation
.RE
.RS 4
regconfig
.RE
.RS 4
regdictionary
.RE
.RS 4
regnamespace
.RE
.RS 4
regoper
.RE
.RS 4
regoperator
.RE
.RS 4
regproc
.RE
.RS 4
regprocedure
.RE
(regclass,
regrole, and
regtype
can be upgraded\&.)
.PP
If you want to use link mode and you do not want your old cluster to be modified when the new cluster is started, consider using the clone mode\&. If that is not available, make a copy of the old cluster and upgrade that in link mode\&. To make a valid copy of the old cluster, use
\fBrsync\fR
to create a dirty copy of the old cluster while the server is running, then shut down the old server and run
\fBrsync \-\-checksum\fR
again to update the copy with any changes to make it consistent\&. (\fB\-\-checksum\fR
is necessary because
\fBrsync\fR
only has file modification\-time granularity of one second\&.) You might want to exclude some files, e\&.g\&.,
postmaster\&.pid, as documented in
Section\ \&25.3.4\&. If your file system supports file system snapshots or copy\-on\-write file copies, you can use that to make a backup of the old cluster and tablespaces, though the snapshot and copies must be created simultaneously or while the database server is down\&.
.SH "SEE ALSO"
\fBinitdb\fR(1), \fBpg_ctl\fR(1), \fBpg_dump\fR(1), \fBpostgres\fR(1)
